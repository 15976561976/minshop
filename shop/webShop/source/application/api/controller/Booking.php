<?php

namespace app\api\controller;
use app\api\model\BookingCustomer as BookingCustomerModel;
use app\api\model\BookingDetail as BookingDetailModel;
use app\api\model\BookingSchedule as BookingScheduleModel;
use app\api\model\BookingType as BookingTypeModel;
use app\api\model\BookingWorker as BookingWorkerModel;
use app\api\model\BookingTime as BookingTimeModel;

/**
 * 预约服务接口控制器
 * Class Booking
 * @package app\api\controller
 */
class Booking extends Controller
{
    /* @var \app\api\model\User $user */
    private $user;

    /**
     * 构造方法
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->user = $this->getUser();
    }

    /**
     * 预约服务类型以及技师名称模糊搜索接口
     * @return array
     */
    public function search()
    {
        $keyword = trim($this->request->post('keyword'));

        //根据关键字，模糊查找服务类型
        $typeModel = new BookingTypeModel;
        $typeInfo = $typeModel->getTypeList($keyword);

        //根据关键字，模糊查找人员信息
        $workerModel = new BookingWorkerModel;
        $userInfo = $workerModel->getWorkerList($keyword);

        return $this->renderSuccess(compact('typeInfo', 'userInfo'));
    }

    /**
     * 全部服务类型列表
     * @return array
     */
    public function getTypeList()
    {
        $list = array_values(BookingTypeModel::getCacheTree());
        return $this->renderSuccess(compact('list'));
    }

    /**
     * 根据服务类型，日期获取符合条件的技师
     * @return array
     */
    public function getWorkerList()
    {
        $model = new BookingTimeModel;
        $list = $model->getWorker($this->request->post());
        return $this->renderSuccess(compact('list'));
    }

    /**
     * 获取单一技师时间段明细信息
     * @return array
     */
    public function getWorkTime()
    {
        //技师信息
        $model = new BookingWorkerModel;
        $workerInfo = $model->getWorkerInfo($this->request->post());

        //技师排班明细
        $scheduleModel = new BookingScheduleModel;
        $workerTime = $scheduleModel->getTimeLine($this->request->post());

        return $this->renderSuccess(compact('workerInfo', 'workerTime'));
    }

    /**
     * 获取预约基本信息
     * @return array
     */
    public function getBookingInfo()
    {
        $model = new BookingWorkerModel;
        $list = $model->getBookingInfo($this->request->post());
        $list['booking_time'] = $this->request->post('work_day') . ' ' . $this->request->post('time_line');

        //获取预约客户信息
        $model = new BookingCustomerModel;
        $customerInfo = $model->getCustomerInfo($this->user);

        return $this->renderSuccess(compact('list', 'customerInfo'));
    }

    /**
     * 添加预约客户信息
     * @return array
     */
    public function addCustomerInfo()
    {
        $model = new BookingCustomerModel;
        if (!$model->addCustomerInfo($this->request->post(), $this->user)) {
            return $this->renderError('添加失败');
        }
        return $this->renderSuccess([], '添加成功');
    }

    /**
     * 删除预约客户信息
     * @return array
     */
    public function delCustomerInfo()
    {
        $model = new BookingCustomerModel;
        if (!$model->delCustomerInfo($this->request->post())) {
            return $this->renderError('删除失败');
        }
        return $this->renderSuccess([], '删除成功');
    }

    /**
     * 客户预约操作
     * @return array
     */
    public function action()
    {
        $model = new BookingDetailModel;
        if (!$model->action($this->request->post(), $this->user)) {
            return $this->renderError('预约失败');
        }
//        $this->sendBookingMessage($this->request->post());
        return $this->renderSuccess([], '预约成功');
    }

    /**
     * 客户取消预约操作
     * @return array
     */
    public function cancelBooking()
    {
        $model = BookingDetailModel::detail($this->request->post('booking_detail_id'));
        if (!$model->cancel($this->request->post())) {
            return $this->renderError('取消预约失败');
        }
        return $this->renderSuccess([], '取消预约成功');
    }

    /**
     * 获取预约记录明细
     * @return array
     */
    public function getBookingDetail()
    {
        $model = new BookingDetailModel;
        $list = $model->getBookingDetail($this->user);
        return $this->renderSuccess(compact('list'));
    }

    /**
     * 发送预约成功通知消息
     * @param $postData
     * @return mixed
     */
    protected function sendBookingMessage($postData)
    {
        $customerInfo = BookingCustomerModel::where('id', $postData['customer_id'])->find();
        $workerInfo = BookingWorkerModel::with(['type'])->where('id', $postData['worker_id'])->find();
        $url = 'https://api.weixin.qq.com/cgi-bin/message/wxopen/template/send?access_token=' . $this->accesstoken();
        $dataArr = [];
        $dataArr['touser'] = $this->user['open_id'];
        $dataArr['form_id'] = $postData['form_id'];
        $dataArr['template_id'] = 'kVC_XDsJ3fsd7chT7ySQ7MBXdaOlFjwAaH_wUDz3PJ8';
        $dataArr['data'] = [
            'keyword1' => [
                'value' => $customerInfo->username
            ],
            'keyword2' => [
                'value' => $workerInfo->type->name
            ],
            'keyword3' => [
                'value' => $postData['booking_time']
            ],
            'keyword4' => [
                'value' => $workerInfo->worker_name
            ]
        ];
        return https_curl_json($url, $dataArr, 'json');
    }
}